ARG DEBIAN_VERSION=11

FROM debian:${DEBIAN_VERSION} AS build

ARG POETRY_VERSION=1.6.1
ARG LIBPYTHON3_VERSION=3.9.2-3
ARG GCC_VERSION=4:10.2.1-1
ARG PYTHON3_VERSION=3.9.2-3
ARG PYTHON3_PIP_VERSION=20.3.4-4+deb11u1

RUN apt-get update && \
  apt-get install --no-install-suggests --no-install-recommends --yes python3=${PYTHON3_VERSION} python3-pip=${PYTHON3_PIP_VERSION} gcc=${GCC_VERSION} libpython3-dev=${LIBPYTHON3_VERSION} && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists/* && \
  pip install --no-cache-dir "poetry==${POETRY_VERSION}"

# Copy just the pyproject.toml and poetry.lock files to install dependencies
COPY ./py_src/pyproject.toml ./py_src/poetry.lock /

# Set up the virtualenv and install dependencies
RUN poetry config virtualenvs.create true && \
  poetry config virtualenvs.in-project true && \
  # Disable pip and setuptools installs in the virtualenv
  poetry config virtualenvs.options.no-pip true && \
  poetry config virtualenvs.options.no-setuptools true && \
  # Install dependencies
  poetry install

# Copy the rest of the project over and build the app
# hadolint ignore=DL3007
FROM ghcr.io/fivexl/secure-container-image-python3-distroless-debian-11:latest AS runtime

COPY --from=build /.venv /.venv
WORKDIR /app
COPY ./py_src ./app
EXPOSE 80

HEALTHCHECK --interval=1m --timeout=3s \
    CMD ["lprobe", "-mode=http", "-endpoint=/", "-port=80"]

ENTRYPOINT ["/.venv/bin/uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "80"]



# To run this example app:
# Move to the directory where this file is located and run:
# docker build -t py-app-poetry -f Dockerfile.py-app-poetry .
# docker run -p 8080:80 -d py-app-poetry
# curl http://localhost:8080/
# curl http://localhost:8080/stats
